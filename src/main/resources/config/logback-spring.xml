<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<!--# 可以参考 base.xml -->
	<!--# <include resource="org/springframework/boot/logging/logback/base.xml" /> -->

	<!--# 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL 如果设置为INFO，则低于INFO的信息都不会输出 -->
	<!--# scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
	<!--# scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
	<!--# debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
	<!--# 日志格式：%m输出的信息, %p日志级别, %t线程名, %d日期, %c类的全名, %i索引 -->

	<!-- 彩色日志依赖的渲染类 -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

	<!-- 日志格式 -->
	<property name="CONSOLE_LOG_PATTERN"
		value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />
	<property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />

	<!-- 文件格式 -->
	<property name="LOG_FILE_NAME" value="logs/boot-web-demo.log" />
	<property name="LOG_FILE_ROLLING_NAME" value="logs/boot-web-demo.%d.%i.log" />

	<!--输出到控制台 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>info</level>
		</filter>
		<encoder>
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>


	<!--# 输出到文件 -->
	<!--# RollingPolicy: 按照文件大小对日志进行分割 ，涉及文件移动和重命名 -->
	<!--# TimeBasedRollingPolicy： 根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
	<appender name="syslog" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<File>${LOG_FILE_NAME}</File>

		<!--# 文件名：file.2018-01-01.0.log -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

			<!--# 活动文件名称 -->
			<fileNamePattern>${LOG_FILE_ROLLING_NAME}</fileNamePattern>

			<!--# 设置日志文件的保存期限为30天 -->
			<maxHistory>30</maxHistory>
			<!--# 设置日志文件文件分割1KB -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
				<maxFileSize>1KB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 设置日志输出 -->
	<root level="info">
		<appender-ref ref="CONSOLE" />
		<!--[ <appender-ref ref="FILE" /> ] -->
	</root>

</configuration>